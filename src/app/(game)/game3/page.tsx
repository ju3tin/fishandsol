"use client"
import Head from "next/head";
import { Suspense, useEffect, useState } from "react";
import dynamic from "next/dynamic"; // Dynamically import components
import { useLoader } from "@react-three/fiber"; // Import useLoader
import { GLTFLoader } from "three/examples/jsm/loaders/GLTFLoader.js";

// Dynamically import the Canvas, OrbitControls, and Environment components
const CanvasWithClientSide = dynamic(() => import("@react-three/fiber").then(mod => mod.Canvas), {
  ssr: false, // Disable SSR for Canvas
});

const OrbitControls = dynamic(() => import("@react-three/drei").then(mod => mod.OrbitControls), {
  ssr: false, // Disable SSR for OrbitControls
});

const Environment = dynamic(() => import("@react-three/drei").then(mod => mod.Environment), {
  ssr: false, // Disable SSR for Environment
});

const Model = () => {
  // Load the 3D model using useLoader
  const gltf = useLoader(GLTFLoader, "/earth/scene.gltf");

  return (
    <>
      {/* Use scale to control the size of the 3D model */}
      <primitive object={gltf.scene} scale={0.01} />
    </>
  );
};

export default function Home() {
  const [isClient, setIsClient] = useState(false);

  // UseEffect to detect client-side rendering
  useEffect(() => {
    setIsClient(true); // Check if window is available (client-side)
  }, []);

  if (!isClient) return null; // Prevent rendering on SSR

  return (
    <div>
      <Head>
        <title>Three.js Example</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="globe">
        <CanvasWithClientSide shadows dpr={[1, 2]} camera={{ position: [0, 0, 4], fov: 50 }}>
          <ambientLight intensity={0.7} />
          <spotLight intensity={0.5} angle={0.1} penumbra={1} position={[10, 15, 10]} castShadow />
          <Suspense fallback={null}>
            <Model />
            {/* To add environment effect to the model */}
            <Environment preset="city" />
          </Suspense>
          <OrbitControls autoRotate />
        </CanvasWithClientSide>
      </div>
    </div>
  );
}